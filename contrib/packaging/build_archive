#!/bin/bash

set -eou pipefail +x

REL_PATH=$(pwd $(dirname $0))
ERR_STACKSTORM_VERSION=$(python <<EOF
import os,sys
sys.path.insert(0, os.path.abspath("${REL_PATH}/../../src/err-stackstorm"))
from errst2lib.version import ERR_STACKSTORM_VERSION
print(ERR_STACKSTORM_VERSION)
EOF
)
# Package contains the following software projects and their respective licence.
#
# errbot                      GPL3
# err-backend-discord         GPL3
# err-backend-slackv3         GPL3
# err-backend-botframework    MIT License
# err-backend-mattermost      GPL3
#
# err-stackstorm              Apache 2.0
#
# The build process is the following:
#  1. Acquire the source code and install build time dependencies
#  2. Create virtualenv and install dependencies.
#  3. Prune virtualenv of git metadata and python compiled bytecode.
#  4. Create tar.gz snapshot of virtualenv for OS/architecture
#  5. Run package build processusing latest tar.gz
#  6. Update repository with package.

# References
#
# https://gist.github.com/fernandoaleman/1377211/d78d13bd8f134e7d9b9bc3da5895c859d7cbf294
# https://gist.githubusercontent.com/fernandoaleman/1377169/raw/3e841ca1a887dd21f3fcb35a3e74b0cc2fc4977b/create-repo-metadata.sh
# https://stackoverflow.com/questions/122327/how-do-i-find-the-location-of-my-python-site-packages-directory
#
function title
{
    echo -e "\033[38;5;206;48;5;57m${1}\033[0m"
}
function rocky8_install
{
    dnf install -y "${PKGS[@]}"
}
function rocky9_install
{
    dnf install -y "${PKGS[@]}"
}
function ubuntu20_install
{
    apt install "${PKGS[@]}"
}
function ubuntu22_install
{
    apt install "${PKGS[@]}"
}
function ubuntu24_install
{
    apt install "${PKGS[@]}"
}
function debian11_install
{
    apt install "${PKGS[@]}"
}
function debian12_install
{
    apt install "${PKGS[@]}"
}

function install_system_requirements
{
    title "INSTALL SYSTEM REQUIREMENTS"
    "${DISTRO_COMBO}_install"
}

function create_virtual_environment
{
    title "CREATE VIRTUAL ENVIRONMENT"
    "${PYBIN}" -m venv "${ROOT}/venv"
    cd "${ROOT}"
    for d in ./{plugins,backends,data}
    do
        test -d "$d" || mkdir "$d"
    done
}


function install_python_packages
{
    title "INSTALL ERRBOT PYTHON PACKAGES"

    PKGS=(
        "errbot[IRC,XMPP,telegram]==${ERRBOT_VERSION}"
        "err-backend-discord"
        "errbot-backend-slackv3"
        "err-backend-mattermost"
        "git+https://github.com/nzlosh/err-backend-gitter@maint_nzlosh"
#        "git+https://github.com/nzlosh/err-backend-botframework"
        "err-stackstorm==${ERR_STACKSTORM_VERSION}"
    )

    for pkg in ${PKGS[@]}
    do
        pip install "$pkg"
    done
}

function prune_installation
{
    title "PRUNE INSTALLATION"
    # Remove python cache files and hidden files.
    find "$ROOT/venv" -iname '*.pyc' -delete
    # Remove unrequired directories
    for dir in '__pycache__' ".github" "docs" "tests" ".*"
    do
        for tgt in $(find "${ROOT}/venv" -iname "$dir" -type d)
        do
            if [[ -d "$tgt" ]]; then
                rm -rf "$tgt"
            fi
        done
    done
    for f in '.*' 'manifest.in'
    do
        # Remove hidden project files
        find "${ROOT}/venv" -type f -iname '.*' -delete
    done
    # Remove non-core code from err-stackstorm
    for excess in contrib docs tests
    do
        rm -rf "$ROOT/plugins/err-stackstorm/${excess}"
    done
    # remove python build backend directory
    rm -rf "$ROOT"/{plugins,backends}/*/build
}



function install_errbot
{
    title "INSTALL ERRBOT ${ERRBOT_VERSION} $($ROOT/venv/bin/pip --version)"
    source "${ROOT}/venv/bin/activate"

    # source from stack overflow article (virtualenv site directory).
    export VENV_SITE_DIR=$(python3 -c 'import sysconfig; print(sysconfig.get_paths()["purelib"])')

    pip install --upgrade pip
    install_python_packages
    prune_installation
}


function build_archive
{
    install_system_requirements
    create_virtual_environment
    install_errbot
    tar czf "/opt/err-stackstorm_${ERR_STACKSTORM_VERSION}_${DISTRO_COMBO}_x86_64.tar.gz" "$ROOT"
}

export DISTRO=$(source /etc/os-release; echo $ID)
export DISTRO_VERSION=$(source /etc/os-release; echo $VERSION_ID)
# Strip the minor version since the script is designed to work on major versions.
export DISTRO_COMBO="${DISTRO}${DISTRO_VERSION%.*}"
export ROOT="/opt/errbot"
export ERRBOT_VERSION="6.2.0"

case "${DISTRO_COMBO}" in
    rocky8)
        export PKGS=(python39 virtualenv python39-devel git wget)
        export PYBIN=/usr/bin/python3.9
        ;;
    rocky9)
        export PKGS=(python39 python3-devel tar gcc git wget)
        export PYBIN=/usr/bin/python3.9
        ;;
    ubuntu20)
        export PKGS=(python3.9-minimal git)
        export PYBIN=/usr/bin/python3.9
        ;;
    ubuntu22)
        export PKGS=(python3.10-minimal git)
        export PYBIN=/usr/bin/python3.10
        ;;
    ubuntu24)
        export PKGS=(python3.12-minimal git)
        export PYBIN=/usr/bin/python3.12
        ;;
    debian11)
        export PKGS=(python3.9-minimal git wget)
        export PYBIN=/usr/bin/python3.9
        ;;
    debian12)
        export PKGS=(python3.11-minimal git wget)
        export PYBIN=/usr/bin/python3.11
        ;;
    *)
        echo "Distribution ${DISTRO} version ${DISTRO_VERSION} isn't supported."
        exit 1
        ;;
esac

build_archive
title "COMPLETED"
