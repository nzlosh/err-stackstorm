#!/bin/bash

set -eou pipefail +x

ERR_STACKSTORM_VERSION=2.2.0

# Package contains the following software projects and their respective licence.
#
# errbot                      GPL3
# err-backend-discord         GPL3
# err-backend-slackv3         GPL3
# err-backend-botframework    MIT License
# err-backend-mattermost      GPL3
#
# err-stackstorm              Apache 2.0
#
# The build process is the following:
#  1. Acquire the source code and install build time dependencies
#  2. Create virtualenv and install dependencies.
#  3. Prune virtualenv of git metadata and python compiled bytecode.
#  4. Create tar.gz snapshot of virtualenv for OS/architecture
#  5. Run package build processusing latest tar.gz
#  6. Update repository with package.

# References
#
# https://gist.github.com/fernandoaleman/1377211/d78d13bd8f134e7d9b9bc3da5895c859d7cbf294
# https://gist.githubusercontent.com/fernandoaleman/1377169/raw/3e841ca1a887dd21f3fcb35a3e74b0cc2fc4977b/create-repo-metadata.sh
function title
{
    echo -e "\033[38;5;206;48;5;57m${1}\033[0m"
}
function rocky8_install
{
    dnf install -y ${PKGS[@]}
}
function rocky9_install
{
    dnf install -y ${PKGS[@]}
}
function ubuntu18_install
{
    apt install ${PKGS[@]}
}
function ubuntu20_install
{
    apt install ${PKGS[@]}
}
function ubuntu22_install
{
    apt install ${PKGS[@]}
}
function debian10_install
{
    apt install ${PKGS[@]}
}
function debian11_install
{
    apt install ${PKGS[@]}
}

function install_system_requirements
{
    title "INSTALL SYSTEM REQUIREMENTS"
    ${DISTRO_COMBO}_install
}

function create_virtual_environment
{
    title "CREATE VIRTUAL ENVIRONMENT"
    $PYBIN -m venv "$ROOT/venv"
    cd "$ROOT"
    mkdir "$ROOT"/{plugins,backends,data}
}

function fetch_archives
{
    title "DOWNLOAD ARCHIVES"
    export BACKENDS=("err-backend-discord" "err-backend-slackv3" "err-backend-gitter" "err-backend-mattermost" "err-backend-botframework")
    mkdir "${BUILD_DIR}/backends"
    cd "${BUILD_DIR}"
    wget "https://github.com/errbotio/err-backend-discord/archive/refs/tags/v4.0.0.tar.gz" -O "backends/err-backend-discord-v4.0.0.tar.gz"
    wget "https://github.com/errbotio/err-backend-slackv3/archive/refs/tags/v0.2.1.tar.gz" -O "backends/err-backend-slackv3-v0.2.1.tar.gz"
    wget "https://github.com/errbotio/err-backend-mattermost/archive/refs/tags/3.0.0.tar.gz" -O "backends/err-backend-mattermost-v3.0.0.tar.gz"
    wget "https://github.com/nzlosh/err-backend-gitter/archive/refs/tags/v0.1.0.tar.gz" -O "backends/err-backend-gitter-v0.1.0.tar.gz"
    wget "https://github.com/nzlosh/err-backend-botframework/archive/refs/tags/v0.1.0.tar.gz" -O "backends/err-backend-botframework-v0.1.0.tar.gz"

    mkdir "${BUILD_DIR}/plugins"
    export PLUGINS=("err-stackstorm")
    wget "https://github.com/nzlosh/err-stackstorm/archive/refs/tags/v${ERR_STACKSTORM_VERSION}.tar.gz" -O "plugins/err-stackstorm-v${ERR_STACKSTORM_VERSION}.tar.gz"
}

function install_extensions
{
    title "INSTALL ERRBOT EXTENSIONS"
    for location in backends plugins
    do
        # extract
        for targz in "${BUILD_DIR}/${location}"/*.tar.gz
        do
            tar xf "$targz" -C "${ROOT}/${location}"
        done
        # install dependencies
        for proj in "${ROOT}/${location}"/*
        do
            # Install from pyproject
            test -f "${proj}/pyproject.toml" && pip install -e "${proj}"
            # Install from requirements
            test -f "${proj}/requirements.txt" && pip install -r "${proj}/requirements.txt"
        done
    done

    for location in $ROOT/backends
    do
        cd $location
        for backend in ${BACKENDS[@]}
        do
            # Move archive directory names to correct errbot names.
            mv -f *"${backend}"* "$backend"
        done
    done

    for location in "$ROOT/plugins"
    do
        cd "$location"
        for plugin in ${PLUGINS[@]}
        do
            mv -f *"${plugin}"* "$plugin"
        done
    done
}

function prune_installation
{
    title "PRUNE INSTALLATION"
    # Remove python cache files and hidden files.
    find "$ROOT/venv" -iname '*.pyc' -delete
    # Remove unrequired directories
    for dir in '__pycache__' ".github" "docs" "tests"
    do
        find "${ROOT}/venv" -iname "$dir" -type d -exec rm -rf "{}" \;
    done
    for f in '.*' 'manifest.in'
    do
        # Remove hidden project files
        find "${ROOT}/venv" -iname '.*' -delete
    done
    # Remove non-core code from err-stackstorm
    for excess in contrib docs tests
    do
        rm -rf "$ROOT/plugins/err-stackstorm/${excess}"
    done
    # Remove temp build dir
    rm -rf "$BUILD_DIR"
}



function install_errbot
{
    title "INSTALL ERRBOT ($($ROOT/venv/bin/pip --version))"
    source "${ROOT}/venv/bin/activate"
    pip install --upgrade pip
    # Use tmp dir to download and build errbot/plugins.
    export BUILD_DIR=$(mktemp -d "$ROOT"/build.XXXXXX)
    cd "$BUILD_DIR"
    ERRBOT_VERSION="6.2.0"
    wget "https://github.com/errbotio/errbot/archive/refs/tags/${ERRBOT_VERSION}.tar.gz" -O errbot-v${ERRBOT_VERSION}.tar.gz
    tar xf errbot-v${ERRBOT_VERSION}.tar.gz
    cd errbot-${ERRBOT_VERSION}
    pip install -e .[IRC,XMPP,telegram]
    fetch_archives
    install_extensions
    prune_installation
}


function build_archive
{
    install_system_requirements
    create_virtual_environment
    install_errbot
    tar czf "/opt/err-stackstorm_${ERR_STACKSTORM_VERSION}_${DISTRO_COMBO}_x86_64.tar.gz" "$ROOT"
}

export DISTRO=$(source /etc/os-release; echo $ID)
export DISTRO_VERSION=$(source /etc/os-release; echo $VERSION_ID)
# Strip the minor version since the script is designed to work on major versions.
export DISTRO_COMBO="${DISTRO}${DISTRO_VERSION%.*}"
export ROOT="/opt/errbot"

case "${DISTRO_COMBO}" in
    rocky8)
        export PKGS=(python38 virtualenv python38-devel git wget)
        export PYBIN=/usr/bin/python3.8
        ;;
    rocky9)
        export PKGS=(python39 python3-devel tar gcc git wget)
        export PYBIN=/usr/bin/python3.9
        ;;
    ubuntu20)
        export PKGS=(python3.8-minimal git)
        export PYBIN=/usr/bin/python3.8
        ;;
    ubuntu22)
        export PKGS=(python3.10-minimal git)
        export PYBIN=/usr/bin/python3.10
        ;;
    debian11)
        export PKGS=(python3.9-minimal git wget)
        export PYBIN=/usr/bin/python3.9
        ;;
    *)
        echo "Distribution ${DISTRO} version ${DISTRO_VERSION} isn't supported."
        exit 1
        ;;
esac

build_archive
